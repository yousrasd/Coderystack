---
// @ts-nocheck
// Rendered when browsing next pages of posts

import Base from "@/layouts/Base.astro";
import type { CollectionEntry } from "astro:content";

import Post from "@/components/Post";
import Pagination from "@/components/Pagination";
import config from "@/config/config.json";
import { getSinglePage } from "@/utils/contentParser.astro";
import { sortByDate } from "@/utils/strings";

export const prerender = true;

export async function getStaticPaths() {
  const posts = await getSinglePage("posts");
  const totalPages = Math.ceil(posts.length / config.settings.pagination);
  const paths = [];

  for (let i = 1; i < totalPages; i++) {
    paths.push({
      params: {
        slug: (i + 1).toString(),
      },
    });
  }
  return paths;
}

const posts = sortByDate(
  await getSinglePage<CollectionEntry<"posts">>("posts")
);

const paginationSize = config.settings.pagination;

const totalPages = Math.ceil(posts.length / paginationSize);
const { slug } = Astro.params;
const currentPage = slug && !isNaN(Number(slug)) ? Number(slug) : 1;

const postsSliceStart = (currentPage - 1) * paginationSize;
const postsSliceEnd = postsSliceStart + paginationSize;
const currentPosts = posts.slice(postsSliceStart, postsSliceEnd);

---

<Base>
  <section class="flex">
    <div class="flex flex-col items-center w-full">
      {
        currentPosts.map((post) => {
          return (
            <div class="px-10 py-5 my-10 mx-auto w-full sm:w-4/5 lg:w-2/3 xl:w-1/2 shadow-xl rounded-md border border-gray-200">
              <Post
                post={{
                  id: post.id,
                  slug: post.slug,
                  body: post.body,
                  showFullPost: false,
                  ...post.data,
                }}
                client:idle
              />
            </div>
          );
        })
      }
      {
        totalPages > 1 && (
          <Pagination paginationSize={totalPages} activePage={currentPage} />
        )
      }
    </div>
  </section>
</Base>
